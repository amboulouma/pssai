include "alldifferent.mzn";
include "regular.mzn";

%%%%% Input %%%%%

% Minimum number of consecutive shifts
int: minOn;
% Maximum number of consecutive shifts
int: maxOn;
% Minimum number of consecutive free days
int: minOff;
% Maximum number of consecutive free days
int: maxOff;
% Number of employees
int: groups;
% Number of shift types
int: numShifts;
% Array containing the minimum number of consecutive shifts of the corresponding type
array[int] of int: minShift;
% Array containing the maximum number of consecutive shifts of the corresponding type
array[int] of int: maxShift;
% Array containing a set of shifts that are forbidden to follow the corresponding type
array[int] of set of int: forbidden;
% Array of shift sequences of length 3 that are forbidden
array[int,int] of int: forbidden3;
% Matrix of dimension numShifts x 7 indicating the demand of each shift type for each day
array[int,int] of int: demand;

set of int: EMPLOYEE = 1..groups;
set of int: DAY = 1..7;

% derive from demand
int: req_day;
int: req_afternoon;
int: req_night;

int: min_night = 2;
int: max_night = 3;
int: min_day = 2;
int: max_day = 5;
int: min_afternoon = 2;
int: max_afternoon = 4;
         
enum SHIFT= {D,A,N,O};       
int: S = card(SHIFT);

int: Q = 13; int: q0 = 1; set of int: STATE = 1..Q;
array[STATE,SHIFT] of int: t=
    [| 6, 2, 11, 1   % state 1
    | 0, 3, 12, 0   % state 2
    | 0, 4, 13, 0   % state 3
    | 0, 5, 13, 4   % state 4
    | 0, 0, 13, 5   % state 5
    | 2, 2, 11, 0   % state 6
    | 2, 2, 11, 1   % state 7
    | 2, 2, 5, 1   % state 8
    | 10, 13, 13, 1   % state 9
    | 0, 4, 13, 1   % state 10
    | 0, 0, 12, 0   % state 11
    | 0, 0, 13, 0   % state 12
    | 0, 0, 0, 13 |];   % state 12 

array[EMPLOYEE,DAY] of var SHIFT: roster;

constraint forall(j in DAY)(
             sum(i in EMPLOYEE)(roster[i,j] == D) == req_day /\
             sum(i in EMPLOYEE)(roster[i,j] == A) == req_day /\
             sum(i in EMPLOYEE)(roster[i,j] == N) == req_night
           );
           
constraint forall(i in EMPLOYEE)(
             regular([roster[i,j] | j in DAY], Q, S, t, q0, STATE) /\
             sum(j in DAY)(roster[i,j] == D) >= min_day /\
             sum(j in DAY)(roster[i,j] == A) >= min_afternoon /\
             sum(j in DAY)(roster[i,j] == N) >= min_night /\
             sum(j in DAY)(roster[i,j] == D) <= max_day /\
             sum(j in DAY)(roster[i,j] == A) <= max_afternoon /\
             sum(j in DAY)(roster[i,j] == N) <= max_night
           );

solve satisfy;

output [ show(roster[i,j]) ++ if j==card(DAY) then "\n" else " " endif
       | i in EMPLOYEE, j in DAY ]; 
